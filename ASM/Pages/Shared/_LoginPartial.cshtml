@using Microsoft.AspNetCore.Identity

@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@{
   // var user =    await UserManager.GetUserAsync(User);
    //var useRole = await UserManager.GetRolesAsync(User);
}
<ul class="navbar-nav">
@if (User.Identity.IsAuthenticated) @* (SignInManager.IsSignedIn(User))*@
{
    <li class="nav-item">
       
        <a id="manage" class="nav-link" asp-area="" asp-page="/Account/Manage/Index" title="Manage">
            Hello @User.Claims.FirstOrDefault(m => m.Type == "FullName").Value
            ( @UserManager.GetUserName(User) )
             Login as a {@User.Claims.FirstOrDefault(m => m.Type == "AppRole").Value} Role In
                {@User.Claims.FirstOrDefault(m => m.Type == "UnitID").Value}
        </a>
    </li>
    <li class="nav-item">
        <form id="logoutForm" class="form-inline" asp-area="" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Page("/Index", new { area = "" })">
            <button id="logout" type="submit" class="nav-link btn btn-link">Logout</button>
        </form>
    </li>
}
else
{
    <li class="nav-item">
        <a class="nav-link" id="register" asp-area="" asp-page="/Account/Register">Register</a>
    </li>
    <li class="nav-item">
        <a class="nav-link" id="login" asp-area="" asp-page="/Account/Login" asp-route-returnUrl="@Url.Page("/Index", new { area = "" })" >Login</a>
    </li>
}
</ul>
